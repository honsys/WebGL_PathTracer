mat4 multiply(in mat4 mat, in mat4 mato) {
    mat4 dest;

    // Cache the matrix values (makes for huge speed increases!)
    float a00 = mat[0][0], a01 = mat[0][1], a02 = mat[0][2], a03 = mat[0][3];
    float a10 = mat[1][0], a11 = mat[1][1], a12 = mat[1][2], a13 = mat[1][3];
    float a20 = mat[2][0], a21 = mat[2][1], a22 = mat[2][2], a23 = mat[2][3];
    float a30 = mat[3][0], a31 = mat[3][1], a32 = mat[3][2], a33 = mat[3][3];

    // Cache only the current line of the second matrix
    float b0  = mato[0][0], b1 = mato[0][1], b2 = mato[0][2], b3 = mato[0][3];  
    dest[0][0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    dest[0][1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    dest[0][2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    dest[0][3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;


    b0 = mato[1][0];
    b1 = mato[1][1];
    b2 = mato[1][2];
    b3 = mato[1][3];
    dest[1][0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    dest[1][1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    dest[1][2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    dest[1][3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = mato[2][0];
    b1 = mato[2][1];
    b2 = mato[2][2];
    b3 = mato[2][3];
    dest[2][0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    dest[2][1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    dest[2][2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    dest[2][3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = mato[3][0];
    b1 = mato[3][1];
    b2 = mato[3][2];
    b3 = mato[3][3];
    dest[3][0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    dest[3][1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    dest[3][2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    dest[3][3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    return dest;
}

